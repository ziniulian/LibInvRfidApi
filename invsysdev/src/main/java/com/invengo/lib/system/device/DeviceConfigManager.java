package com.invengo.lib.system.device;import android.annotation.SuppressLint;import android.os.Environment;import android.util.Xml;import com.invengo.lib.diagnostics.InvengoLog;import com.invengo.lib.system.device.type.BarcodeModuleType;import com.invengo.lib.system.device.type.DeviceType;import com.invengo.lib.system.device.type.GpsModuleStateType;import com.invengo.lib.system.device.type.NfcModuleStateType;import com.invengo.lib.system.device.type.RfidModuleType;import com.invengo.lib.system.device.type.SleepType;import org.w3c.dom.Document;import org.w3c.dom.Element;import org.w3c.dom.NamedNodeMap;import org.w3c.dom.Node;import org.w3c.dom.NodeList;import org.xmlpull.v1.XmlSerializer;import java.io.File;import java.io.FileInputStream;import java.io.FileOutputStream;import java.io.IOException;import java.util.Locale;import javax.xml.parsers.DocumentBuilder;import javax.xml.parsers.DocumentBuilderFactory;@SuppressLint("WorldWriteableFiles")public class DeviceConfigManager {	private static final String TAG = DeviceConfigManager.class.getSimpleName();	private static final String PATH_NAME = "device";	private static final String FILE_NAME = "dev_option.config";	private static final String ROOT_TAG = "configuration";	private static final String ITEM_TAG = "item";	private static final String DEV_TYPE_ATTR = "type";	private static final String TYPE_BARCODE = "barcode";	private static final String TYPE_RFID = "rfid";	private static final String TYPE_GPS = "gps";	private static final String TYPE_NFC = "nfc";	private static final String TYPE_SLEEP = "sleep";	private static DeviceConfigManager smManager = null;	private BarcodeModuleType mBarcode;	private RfidModuleType mRfid;	private GpsModuleStateType mGps;	private NfcModuleStateType mNfc;	private SleepType mSleep;	private DeviceConfigManager() {		mBarcode = BarcodeModuleType.None;		mRfid = RfidModuleType.None;		mGps = GpsModuleStateType.None;		mNfc = NfcModuleStateType.None;		mSleep = SleepType.None;	}	public BarcodeModuleType getBarcodeType() {		return mBarcode;	}	public void setBarcodeType(BarcodeModuleType type) {		mBarcode = type;	}	public RfidModuleType getRfidType() {		return mRfid;	}	public void setRfidType(RfidModuleType type) {		mRfid = type;	}	public GpsModuleStateType getGpsState() {		return mGps;	}	public void setGpsState(GpsModuleStateType type) {		mGps = type;	}	public NfcModuleStateType getNfcState() {		return mNfc;	}	public void setNfcState(NfcModuleStateType type) {		mNfc = type;	}	public SleepType getSleepType() {		return mSleep;	}	public void setSleepType(SleepType type) {		mSleep = type;	}	public void load() {		InvengoLog.i(TAG, "+++ INFO. load()");		String fileName = String.format(Locale.US, "%s/%s", GetUserDataPath(), FILE_NAME);		File file = null;		FileInputStream fis = null;		DocumentBuilderFactory factory = null;		DocumentBuilder builder = null;		file = new File(fileName);		if (!file.exists()) {			InvengoLog.e(TAG, "ERROR. load() - Failed to not exist file [%s]", fileName);			return;		}		try {			fis = new FileInputStream(file);		} catch (Exception e) {			InvengoLog.e(TAG, e, "ERROR. load() - Failed to open input device option stream [%s]", fileName);			mBarcode = BarcodeModuleType.None;			mRfid = RfidModuleType.None;			mGps = GpsModuleStateType.None;			mNfc = NfcModuleStateType.None;			mSleep = SleepType.None;			return;		}		try {			factory = DocumentBuilderFactory.newInstance();			builder = factory.newDocumentBuilder();			Document doc = builder.parse(fis);			Element config = doc.getDocumentElement();			NodeList items = config.getElementsByTagName(ITEM_TAG);			for (int i = 0; i < items.getLength(); i++) {				Node item = items.item(i);				NamedNodeMap attrs = item.getAttributes();				Node attr = attrs.getNamedItem(DEV_TYPE_ATTR);				String attrVal = attr.getNodeValue();				Node text;				String val = "";				if (attrVal.equals(TYPE_BARCODE)) {					try {						text = item.getFirstChild();						val = text.getNodeValue();						mBarcode = BarcodeModuleType.valueOf(Integer.parseInt(val));						InvengoLog.d(TAG, "DEBUG. load() - Barcode Module : %s", mBarcode);					} catch (Exception e) {						InvengoLog.e(TAG, e, "ERROR. load() - Failed to read barcode device type");					}				} else if (attrVal.equals(TYPE_RFID)) {					try {						text = item.getFirstChild();						val = text.getNodeValue();						mRfid = RfidModuleType.valueOf(Integer.parseInt(val));						InvengoLog.d(TAG, "DEBUG. load() - UHF Module : %s", mRfid);					} catch (Exception e) {						InvengoLog.e(TAG, e, "ERROR. load() - Failed to read RFID device type");					}				} else if (attrVal.equals(TYPE_GPS)) {					try {						text = item.getFirstChild();						val = text.getNodeValue();						mGps = GpsModuleStateType.valueOf(Integer.parseInt(val));						InvengoLog.d(TAG, "DEBUG. load() - GPS : %s", mGps);					} catch (Exception e) {						InvengoLog.e(TAG, e, "ERROR. load() - Failed to read GPS device type");					}				} else if (attrVal.equals(TYPE_NFC)) {					try {						text = item.getFirstChild();						val = text.getNodeValue();						mNfc = NfcModuleStateType.valueOf(Integer.parseInt(val));						InvengoLog.d(TAG, "DEBUG. load() - NFC : %s", mNfc);					} catch (Exception e) {						InvengoLog.e(TAG, "ERROR. load() - Failed to read NFC device type");					}				} else if (attrVal.equals(TYPE_SLEEP)) {					try {						text = item.getFirstChild();						val = text.getNodeValue();						mSleep = SleepType.valueOf(Integer.parseInt(val));						InvengoLog.d(TAG, "DEBUG. load() - Sleep Mode : %s", mSleep);					} catch (Exception e) {						InvengoLog.e(TAG, e, "ERROR. load() - Failed to read sleep type");					}				}			}		} catch (Exception e) {			InvengoLog.e(TAG, e, "ERROR. load() - Failed to read device option");			return;		}		try {			fis.close();		} catch (Exception e) {			InvengoLog.e(TAG, e, "ERROR. load() - Failed to close input device option stream [%s]", fileName);			return;		}		InvengoLog.i(TAG, "--- INFO. load()");	}	public void save() {		InvengoLog.i(TAG, "+++ INFO. save()");		String path = GetUserDataPath();		String fileName = String.format(Locale.US, "%s/%s", path, FILE_NAME);		File file = null;		FileOutputStream fos = null;		XmlSerializer writer = null;		file = new File(path);		if (!file.exists()) {			if (!file.mkdirs()) {				InvengoLog.e(TAG, "ERROR. save() - Failed to create device option folder [%s]", path);				return;			}			try {				Runtime.getRuntime().exec("su");				Runtime.getRuntime().exec("chmod 777 " + path);			} catch (Exception e) {				InvengoLog.e(TAG, e, "ERROR. save() - Failed to change permission option folder [%s]", path);			}		}		file = new File(fileName);		if (!file.exists()) {			try {				file.createNewFile();			} catch (IOException e) {				InvengoLog.e(TAG, e, "ERROR. save() - Failed to create device option file [%s]", fileName);				return;			}			try {				Runtime.getRuntime().exec("su");				Runtime.getRuntime().exec("chmod 777 " + fileName);			} catch (Exception e) {				InvengoLog.e(TAG, e, "ERROR. save() - Failed to change permission device option file [%s]", fileName);			}		}		try {			fos = new FileOutputStream(file);		} catch (Exception e) {			InvengoLog.e(TAG, e, "ERROR. save() - Failed to open output device option stream [%s]", fileName);			return;		}		try {			writer = Xml.newSerializer();			writer.setOutput(fos, "UTF-8");			writer.startDocument(null, Boolean.valueOf(true));			writer.setFeature("http://xmlpull.org/v1/doc/features.html#indent-output", true);			writer.startTag(null, ROOT_TAG);			try {				writer.startTag(null, ITEM_TAG);				writer.attribute(null, DEV_TYPE_ATTR, TYPE_BARCODE);				writer.text("" + mBarcode.getCode());				writer.endTag(null, ITEM_TAG);				InvengoLog.d(TAG, "DEBUG. save() - Barcode Module : %s", mBarcode);			} catch (Exception e) {				InvengoLog.e(TAG, e, "ERROR. save() - Failed to write barcode device type");			}			try {				writer.startTag(null, ITEM_TAG);				writer.attribute(null, DEV_TYPE_ATTR, TYPE_RFID);				writer.text("" + mRfid.getCode());				writer.endTag(null, ITEM_TAG);				InvengoLog.d(TAG, "DEBUG. save() - UHF Module : %s", mRfid);			} catch (Exception e) {				InvengoLog.e(TAG, e, "ERROR. save() - Failed to write rfid device type");			}			try {				writer.startTag(null, ITEM_TAG);				writer.attribute(null, DEV_TYPE_ATTR, TYPE_GPS);				writer.text("" + mGps.getCode());				writer.endTag(null, ITEM_TAG);				InvengoLog.d(TAG, "DEBUG. save() - GPS : %s", mGps);			} catch (Exception e) {				InvengoLog.e(TAG, e, "ERROR. save() - Failed to write gps device type");			}			try {				writer.startTag(null, ITEM_TAG);				writer.attribute(null, DEV_TYPE_ATTR, TYPE_NFC);				writer.text("" + mNfc.getCode());				writer.endTag(null, ITEM_TAG);				InvengoLog.d(TAG, "DEBUG. save() - NFC : %s", mNfc);			} catch (Exception e) {				InvengoLog.e(TAG, e, "ERROR. save() - Failed to write nfc device type");			}			try {				writer.startTag(null, ITEM_TAG);				writer.attribute(null, DEV_TYPE_ATTR, TYPE_SLEEP);				writer.text("" + mSleep.getCode());				writer.endTag(null, ITEM_TAG);				InvengoLog.d(TAG, "DEBUG. save() - Sleep Mode : %s", mSleep);			} catch (Exception e) {				InvengoLog.e(TAG, e, "ERROR. save() - Failed to write sleep device type");			}			writer.endTag(null, ROOT_TAG);			writer.endDocument();			writer.flush();		} catch (Exception e) {			InvengoLog.e(TAG, e, "ERROR. save() - Failed to write device option");			return;		}		try {			fos.flush();			fos.close();		} catch (Exception e) {			InvengoLog.e(TAG, e, "ERROR. save() - Failed to close output device option stream [%s]", fileName);		}		InvengoLog.i(TAG, "--- INFO. save()");	}	public static DeviceConfigManager getInstance() {		if (smManager == null) {			smManager = new DeviceConfigManager();			smManager.load();		}		return smManager;	}	@Override	public String toString() {		return String.format(Locale.US, "%s, %s, %s, %s, %s", mBarcode, mRfid, mGps, mNfc, mSleep);	}	private String GetUserDataPath() {		String path;		DeviceType type = DeviceManager.getDeviceType();		InvengoLog.d(TAG, "GetUserDataPass, deviceType: %s", type);		switch (type) {			case AT911:			case AT911_HILTI_US:			case AT911_HILTI_EU:				path = String.format(Locale.US, "%s/%s", Environment.getDataDirectory(), PATH_NAME);				break;			case AT911N:			case XC2910://add by invengo at 2017.04.26			case XC9910:			case AT911N_HILTI_US:			case AT911N_HILTI_EU:			case AT511:			case AT311:			case AT312:			case XCRF1003:			case AT870A:				path = String.format(Locale.US, "%s/%s",						Environment.getExternalStorageDirectory(), PATH_NAME);				break;			default:				path = String.format(Locale.US, "%s/%s",						Environment.getExternalStorageDirectory(), PATH_NAME);				break;		}		return path;	}}