package com.invengo.lib.system.device.lock;import android.os.Environment;import com.invengo.lib.diagnostics.InvengoLog;import com.invengo.lib.system.device.DeviceManager;import com.invengo.lib.system.device.type.DeviceType;import java.io.File;import java.io.RandomAccessFile;import java.nio.channels.FileChannel;import java.nio.channels.FileLock;import java.util.Locale;public class DeviceLock {	private static final String TAG = DeviceLock.class.getSimpleName();	private static final String PATH_NAME = "device";	private static final String FILE_NAME = "device.lock";	private static File f;	private static FileChannel channel;	private static FileLock lock;	@SuppressWarnings("resource")	public static boolean lock() {		String fileName = String.format(Locale.US, "%s/%s", getUserDataPath(), FILE_NAME);		f = new File(fileName);		try {			channel = new RandomAccessFile(f, "rw").getChannel();			lock = channel.tryLock();			if(lock == null) {				channel.close();				InvengoLog.e(TAG, "ERROR. lock() - Failed to acquire an exclusive lock");				return false;			}			InvengoLog.d(TAG, "DEBUG. lock() - Acquired an exclusive lock successfully.");		} catch (Exception e) {			InvengoLog.e(TAG, e, "ERROR. lock() - Failed to lock");			return false;		}		HookShutdown hookShutdown = new HookShutdown();		Runtime.getRuntime().addShutdownHook(hookShutdown);		return true;	}	public static boolean unlock() {		boolean bRtn = false;		try {			if(lock != null) {				lock.release();				channel.close();				//f.delete();				bRtn = true;				InvengoLog.d(TAG, "DEBUG. unlock() - Released an exclusive lock successfully.");			}		} catch(Exception e) {			InvengoLog.e(TAG, e, "ERROR. unlock() - Failed to unlock");		}		return bRtn;	}	private static String getUserDataPath() {		String path;		DeviceType type = DeviceManager.getDeviceType();		//Log.d(TAG, String.format(Locale.US, "GetUserDataPass, deviceType: %s", type));		switch (type) {			case AT911:			case AT911_HILTI_US:			case AT911_HILTI_EU:				path = String.format(Locale.US, "%s/%s", Environment.getDataDirectory(),						PATH_NAME);				break;			case AT911N:			case XC2910://add by invengo at 2017.04.26			case XC9910:			case AT911N_HILTI_US:			case AT911N_HILTI_EU:			case AT511:			case AT311:			case AT312:			case XCRF1003:			case AT870A:				path = String.format(Locale.US, "%s/%s",						Environment.getExternalStorageDirectory(), PATH_NAME);				break;			default:				path = String.format(Locale.US, "%s/%s",						Environment.getExternalStorageDirectory(), PATH_NAME);				break;		}		InvengoLog.i(TAG, "INFO. getUserDataPath() - [%s]", path);		return path;	}	public static class HookShutdown extends Thread {		public void run () {			InvengoLog.d(TAG, "+++ DEBUG. unlock");			unlock();			InvengoLog.d(TAG, "--- DEBUG. unlock");		}	}}